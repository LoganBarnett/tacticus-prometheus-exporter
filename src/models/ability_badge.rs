/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// AbilityBadge : key is the grand alliance
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AbilityBadge {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "rarity")]
    pub rarity: Rarity,
    #[serde(rename = "amount")]
    pub amount: i32,
}

impl AbilityBadge {
    /// key is the grand alliance
    pub fn new(rarity: Rarity, amount: i32) -> AbilityBadge {
        AbilityBadge {
            name: None,
            rarity,
            amount,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Rarity {
    #[serde(rename = "Common")]
    Common,
    #[serde(rename = "Uncommon")]
    Uncommon,
    #[serde(rename = "Rare")]
    Rare,
    #[serde(rename = "Epic")]
    Epic,
    #[serde(rename = "Legendary")]
    Legendary,
}

impl Default for Rarity {
    fn default() -> Rarity {
        Self::Common
    }
}

