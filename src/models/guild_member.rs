/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GuildMember {
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "role")]
    pub role: Role,
    #[serde(rename = "level")]
    pub level: i32,
    /// unix timestamp (in seconds) when player was last active in guild
    #[serde(rename = "lastActivityOn", skip_serializing_if = "Option::is_none")]
    pub last_activity_on: Option<String>,
}

impl GuildMember {
    pub fn new(user_id: String, role: Role, level: i32) -> GuildMember {
        GuildMember {
            user_id,
            role,
            level,
            last_activity_on: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "MEMBER")]
    Member,
    #[serde(rename = "OFFICER")]
    Officer,
    #[serde(rename = "CO_LEADER")]
    CoLeader,
    #[serde(rename = "LEADER")]
    Leader,
}

impl Default for Role {
    fn default() -> Role {
        Self::Member
    }
}

