/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Raid {
    #[serde(rename = "userId")]
    pub user_id: String,
    #[serde(rename = "tier")]
    pub tier: i32,
    #[serde(rename = "set")]
    pub set: i32,
    #[serde(rename = "encounterIndex")]
    pub encounter_index: i32,
    #[serde(rename = "remainingHp")]
    pub remaining_hp: i32,
    #[serde(rename = "maxHp")]
    pub max_hp: i32,
    #[serde(rename = "encounterType")]
    pub encounter_type: EncounterType,
    #[serde(rename = "unitId")]
    pub unit_id: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "rarity")]
    pub rarity: Rarity,
    #[serde(rename = "damageDealt")]
    pub damage_dealt: i32,
    #[serde(rename = "damageType")]
    pub damage_type: DamageType,
    /// unix timestamp (in seconds) when battle/bomb started
    #[serde(rename = "startedOn")]
    pub started_on: String,
    /// unix timestamp (in seconds) when battle/bomb ended
    #[serde(rename = "completedOn", skip_serializing_if = "Option::is_none")]
    pub completed_on: Option<String>,
    #[serde(rename = "heroDetails")]
    pub hero_details: Vec<models::PublicHeroDetail>,
    #[serde(rename = "machineOfWarDetails", skip_serializing_if = "Option::is_none")]
    pub machine_of_war_details: Option<Box<models::PublicHeroDetail>>,
    #[serde(rename = "globalConfigHash")]
    pub global_config_hash: String,
}

impl Raid {
    pub fn new(user_id: String, tier: i32, set: i32, encounter_index: i32, remaining_hp: i32, max_hp: i32, encounter_type: EncounterType, unit_id: String, r#type: String, rarity: Rarity, damage_dealt: i32, damage_type: DamageType, started_on: String, hero_details: Vec<models::PublicHeroDetail>, global_config_hash: String) -> Raid {
        Raid {
            user_id,
            tier,
            set,
            encounter_index,
            remaining_hp,
            max_hp,
            encounter_type,
            unit_id,
            r#type,
            rarity,
            damage_dealt,
            damage_type,
            started_on,
            completed_on: None,
            hero_details,
            machine_of_war_details: None,
            global_config_hash,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EncounterType {
    #[serde(rename = "SideBoss")]
    SideBoss,
    #[serde(rename = "Boss")]
    Boss,
}

impl Default for EncounterType {
    fn default() -> EncounterType {
        Self::SideBoss
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Rarity {
    #[serde(rename = "Common")]
    Common,
    #[serde(rename = "Uncommon")]
    Uncommon,
    #[serde(rename = "Rare")]
    Rare,
    #[serde(rename = "Epic")]
    Epic,
    #[serde(rename = "Legendary")]
    Legendary,
}

impl Default for Rarity {
    fn default() -> Rarity {
        Self::Common
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DamageType {
    #[serde(rename = "Bomb")]
    Bomb,
    #[serde(rename = "Battle")]
    Battle,
}

impl Default for DamageType {
    fn default() -> DamageType {
        Self::Bomb
    }
}

