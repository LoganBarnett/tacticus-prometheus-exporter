/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Unit {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "faction", skip_serializing_if = "Option::is_none")]
    pub faction: Option<String>,
    #[serde(rename = "grandAlliance", skip_serializing_if = "Option::is_none")]
    pub grand_alliance: Option<GrandAlliance>,
    /// Star level: 0 = Common, 3 = Uncommon, 6 = Rare, 9 = Epic, 12 = Legendary
    #[serde(rename = "progressionIndex")]
    pub progression_index: i32,
    /// total XP gained for character
    #[serde(rename = "xp")]
    pub xp: i32,
    /// XP level of character
    #[serde(rename = "xpLevel")]
    pub xp_level: i32,
    /// 0 = Stone I, 3 = Iron I, 6 = Bronze I, 9 = Silver I, 12 = Gold I, 15 = Diamond I, 17 = Diamond III
    #[serde(rename = "rank")]
    pub rank: i32,
    /// active and passive abilities of character
    #[serde(rename = "abilities")]
    pub abilities: Vec<models::Ability>,
    /// 2*3 matrix, 0 = top left, 1 = bottom left, 2 top center etc
    #[serde(rename = "upgrades")]
    pub upgrades: Vec<i32>,
    /// equipped items of character
    #[serde(rename = "items")]
    pub items: Vec<models::UnitItem>,
    /// owned shards of character
    #[serde(rename = "shards")]
    pub shards: i32,
}

impl Unit {
    pub fn new(id: String, progression_index: i32, xp: i32, xp_level: i32, rank: i32, abilities: Vec<models::Ability>, upgrades: Vec<i32>, items: Vec<models::UnitItem>, shards: i32) -> Unit {
        Unit {
            id,
            name: None,
            faction: None,
            grand_alliance: None,
            progression_index,
            xp,
            xp_level,
            rank,
            abilities,
            upgrades,
            items,
            shards,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum GrandAlliance {
    #[serde(rename = "Imperial")]
    Imperial,
    #[serde(rename = "Xenos")]
    Xenos,
    #[serde(rename = "Chaos")]
    Chaos,
}

impl Default for GrandAlliance {
    fn default() -> GrandAlliance {
        Self::Imperial
    }
}

