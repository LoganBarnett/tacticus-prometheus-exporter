/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PlayerMetaData {
    /// gameConfigVersion for player
    #[serde(rename = "configHash")]
    pub config_hash: String,
    /// unix timestamp (in seconds). Empty if key never expires
    #[serde(rename = "apiKeyExpiresOn", skip_serializing_if = "Option::is_none")]
    pub api_key_expires_on: Option<i64>,
    /// unix timestamp (in seconds) when player was last updated from the server. Player data is cached in the API so use this field to know when it was actually fetched.
    #[serde(rename = "lastUpdatedOn")]
    pub last_updated_on: i64,
    /// allowed scopes of the supplied apiKey
    #[serde(rename = "scopes")]
    pub scopes: Vec<String>,
}

impl PlayerMetaData {
    pub fn new(config_hash: String, last_updated_on: i64, scopes: Vec<String>) -> PlayerMetaData {
        PlayerMetaData {
            config_hash,
            api_key_expires_on: None,
            last_updated_on,
            scopes,
        }
    }
}

