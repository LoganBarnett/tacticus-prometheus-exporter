/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CampaignProgress {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "battles")]
    pub battles: Vec<models::CampaignLevel>,
}

impl CampaignProgress {
    pub fn new(id: String, name: String, r#type: Type, battles: Vec<models::CampaignLevel>) -> CampaignProgress {
        CampaignProgress {
            id,
            name,
            r#type,
            battles,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "Standard")]
    Standard,
    #[serde(rename = "Mirror")]
    Mirror,
    #[serde(rename = "Elite")]
    Elite,
    #[serde(rename = "EliteMirror")]
    EliteMirror,
}

impl Default for Type {
    fn default() -> Type {
        Self::Standard
    }
}

