/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Inventory {
    #[serde(rename = "items")]
    pub items: Vec<models::Item>,
    #[serde(rename = "upgrades")]
    pub upgrades: Vec<models::Upgrade>,
    #[serde(rename = "shards")]
    pub shards: Vec<models::Shard>,
    #[serde(rename = "xpBooks")]
    pub xp_books: Vec<models::XpBook>,
    /// key is the grand alliance
    #[serde(rename = "abilityBadges")]
    pub ability_badges: std::collections::HashMap<String, Vec<models::AbilityBadge>>,
    #[serde(rename = "components")]
    pub components: Vec<models::Component>,
    #[serde(rename = "forgeBadges")]
    pub forge_badges: Vec<models::ForgeBadge>,
    /// key is the grand alliance
    #[serde(rename = "orbs")]
    pub orbs: std::collections::HashMap<String, Vec<models::Orb>>,
    #[serde(rename = "requisitionOrders", skip_serializing_if = "Option::is_none")]
    pub requisition_orders: Option<Box<models::RequisitionOrders>>,
    #[serde(rename = "resetStones")]
    pub reset_stones: i32,
}

impl Inventory {
    pub fn new(items: Vec<models::Item>, upgrades: Vec<models::Upgrade>, shards: Vec<models::Shard>, xp_books: Vec<models::XpBook>, ability_badges: std::collections::HashMap<String, Vec<models::AbilityBadge>>, components: Vec<models::Component>, forge_badges: Vec<models::ForgeBadge>, orbs: std::collections::HashMap<String, Vec<models::Orb>>, reset_stones: i32) -> Inventory {
        Inventory {
            items,
            upgrades,
            shards,
            xp_books,
            ability_badges,
            components,
            forge_badges,
            orbs,
            requisition_orders: None,
            reset_stones,
        }
    }
}

