/*
 * Tacticus API
 *
 * This API provides read only access to various game related data.
 *
 * The version of the OpenAPI document: 0.1 BETA
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Progress {
    #[serde(rename = "campaigns")]
    pub campaigns: Vec<models::CampaignProgress>,
    #[serde(rename = "arena", skip_serializing_if = "Option::is_none")]
    pub arena: Option<Box<models::Arena>>,
    #[serde(rename = "guildRaid", skip_serializing_if = "Option::is_none")]
    pub guild_raid: Option<Box<models::GuildRaid>>,
    #[serde(rename = "onslaught", skip_serializing_if = "Option::is_none")]
    pub onslaught: Option<Box<models::Onslaught>>,
    #[serde(rename = "salvageRun", skip_serializing_if = "Option::is_none")]
    pub salvage_run: Option<Box<models::SalvageRun>>,
}

impl Progress {
    pub fn new(campaigns: Vec<models::CampaignProgress>) -> Progress {
        Progress {
            campaigns,
            arena: None,
            guild_raid: None,
            onslaught: None,
            salvage_run: None,
        }
    }
}

